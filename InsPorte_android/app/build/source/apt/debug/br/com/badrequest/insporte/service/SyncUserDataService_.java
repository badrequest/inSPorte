//
// DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED USING AndroidAnnotations 3.0.1.
//


package br.com.badrequest.insporte.service;

import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.os.Handler;
import android.os.Looper;
import android.support.v4.app.Fragment;
import android.util.Log;
import br.com.badrequest.insporte.integration.bean.Credentials;
import br.com.badrequest.insporte.integration.service.handler.ServiceErrorHandler_;
import br.com.badrequest.insporte.integration.service.mapper.InsporteServiceMapper_;
import br.com.badrequest.insporte.preferences.LoginPrefs_;
import org.androidannotations.api.BackgroundExecutor;

public final class SyncUserDataService_
    extends SyncUserDataService
{

    private Handler handler_ = new Handler(Looper.getMainLooper());

    public static SyncUserDataService_.IntentBuilder_ intent(Context context) {
        return new SyncUserDataService_.IntentBuilder_(context);
    }

    public static SyncUserDataService_.IntentBuilder_ intent(Fragment supportFragment) {
        return new SyncUserDataService_.IntentBuilder_(supportFragment);
    }

    private void init_() {
        loginPrefs = new LoginPrefs_(this);
        insporteServiceMapper = new InsporteServiceMapper_();
        serviceErrorHandler = ServiceErrorHandler_.getInstance_(this);
    }

    @Override
    public void onCreate() {
        init_();
        super.onCreate();
    }

    @Override
    public void sendPhotos(final Credentials credentials) {
        if (Log.isLoggable("SyncUserDataService", Log.INFO)) {
            long start = System.currentTimeMillis();
            Log.i("SyncUserDataService", "Entering [sendPhotos(br.com.badrequest.insporte.integration.bean.Credentials)]");
            try {
                SyncUserDataService_.super.sendPhotos(credentials);
            } finally {
                long duration = (System.currentTimeMillis()-start);
                Log.i("SyncUserDataService", ("Exiting [sendPhotos(br.com.badrequest.insporte.integration.bean.Credentials)], duration in ms: "+ duration));
            }
        } else {
            SyncUserDataService_.super.sendPhotos(credentials);
        }
    }

    @Override
    public void pararServico() {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                SyncUserDataService_.super.pararServico();
            }

        }
        );
    }

    @Override
    public void syncData() {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @Override
            public void execute() {
                try {
                    SyncUserDataService_.super.syncData();
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    public static class IntentBuilder_ {

        private Context context_;
        private final Intent intent_;
        private Fragment fragmentSupport_;

        public IntentBuilder_(Context context) {
            context_ = context;
            intent_ = new Intent(context, SyncUserDataService_.class);
        }

        public IntentBuilder_(Fragment fragment) {
            fragmentSupport_ = fragment;
            context_ = fragment.getActivity();
            intent_ = new Intent(context_, SyncUserDataService_.class);
        }

        public Intent get() {
            return intent_;
        }

        public SyncUserDataService_.IntentBuilder_ flags(int flags) {
            intent_.setFlags(flags);
            return this;
        }

        public ComponentName start() {
            return context_.startService(intent_);
        }

        public boolean stop() {
            return context_.stopService(intent_);
        }

    }

}
